[
  {
    "id": 1,
    "img": "https://github.com/han0224/my-earth/assets/70616579/0eed50f3-36f4-46ae-aaa2-6f9727bfee4c",
    "name": "My Earth",
    "date": "2022.05 ~ 2022.08",
    "team": "개인 프로젝트",
    "url": "",
    "urlInfo": "배포전",
    "skill": ["Typescript", "Next.js"],
    "github": "https://github.com/han0224/my-earth",
    "info": [
      {
        "id": "info-1",
        "title": "프로젝트 소개",
        "content": [
          "Typescript와 Next.js 로 구현한 웹사이트 입니다.",
          "평소 공부를 몇시간 하는지 측정하고 싶어 이를 편리하게 관리할 수 있는 웹사이트를 제작하게 되었습니다."
        ]
      },
      {
        "id": "info-2",
        "title": "타이머",
        "content": [
          "로그인을 한 후 화면 정중앙에 보이는 화살표를 클릭하면 타이머가 작동합니다.",
          "다른 페이지로 이동을 하더라도 타이머는 계속해서 작동하고 있으며, 메인페이지에서만 타이머를 실행 및 중지 시킬 수 있습니다.",
          "타이머가 중지 된 후에는 프로필 페이지에서 이전까지의 측정된 시간들을 볼 수 있으며 이를 시각화 하였습니다.",
          [
            "단, 기존 nivo 차트가 react 18 과의 호환성 문제가 있다는 것을 깨달아 이는 현재 rechart 로 변경중에 있습니다."
          ]
        ]
      },
      {
        "id": "info-3",
        "title": "음악 플레이",
        "content": [
          "로그인을 하지 않은 사용자도 화면 하단에 있는 음악 플레이 버튼을 클릭하면 음악을 재생할 수 있습니다.",
          "음악은 현재 4곡이 존재하며 자동으로 다음곡이 재생됩니다.",
          "음악 재생 버튼 양옆에는 음악을 교체할 수 있는 버튼이 존재합니다.",
          "가장 오른쪽에는 볼륨조절버튼이 존재해 슬라이드 방식으로 음량을 조절할 수 있습니다."
        ]
      },
      {
        "id": "info-4",
        "title": "Todo 기능",
        "content": [
          "Todo 추가 기능",
          [
            "추가 버튼을 클릭하면 새로운 Todo를 입력할 수 있게 되며 입력창 옆에 추가 버튼을 클릭하면 최종적으로 Todo가 새롭게 생성됩니다.",
            "최대 5개까지만 추가 가능하고 그 이상 추가할 경우 alert창을 이용해 추가가 불가능하다는 것을 사용자 알립니다."
          ],
          "삭제 기능",
          [
            "한 Todo 아이템에 마우스를 올리면 삭제 아이콘이 표시됩니다.",
            "삭제 아이콘을 클릭하면 Todo가 삭제됩니다."
          ],
          "기본적으로 Todo List 들은 열려있으며 위의 Todo List 버튼을 클릭하면 Todo List가 닫히게 됩니다. "
        ]
      }
    ],
    "data": [
      {
        "id": "data-1",
        "title": "새롭게 배운점",
        "content": [
          "Typescript는 정적 타입을 지원하며 컴파일 단계에서 오류를 잡을 수 있고, 컴파일을 통해 Javascript로 변환된다는 점을 새롭게 알게 되었습니다.",
          "Redux는 스토어를 사용하여 상태를 컴포넌트 구조 밖에 두어 상태를 업데이트 하거나 전달해 주어, 기존 컴포넌트를 거쳐서 받아오는 방식보다 쉽게 상태관리를 할 수 있다는 점을 알게되었습니다.",
          [
            "단, 새로고침을 하게되면 데이터들이 전부 사라지기에 이를 방지하기 위한 라이브러리를 사용하거나, localStorage를 사용하는 등 다른 방식을 사용해야한다는 점도 알게 되었습니다."
          ],
          "CSR은 클라이언트 측에서 렌더링이 이루어지는 것이고, SSR은 서버측에서 렌더링을 마친 후 클라이언트에게 전달하는 방식입니다.",
          [
            "SSR은 CSR에 비해 초기 로딩속도가 빠르지만 페이지 전환은 CSR에 비해 느리다는 점을 새롭게 알게 되었습니다."
          ],
          "REST API는 HTTP URI를 통해 자원을 명시하고, GET, POST, DELETE를 통해 해당 자원에 대한 CRUD를 적용한다는 점을 알게 되었습니다."
        ]
      }
    ]
  },
  {
    "id": 2,
    "img": "https://github.com/woorifisa-projects/GoodFriends/assets/70616579/e2e76d8c-41ab-433b-ae4f-61e8a344d0e2",
    "name": "타자연습",
    "date": "2023.02",
    "team": "개인 프로젝트",
    "url": "https://rococo-beignet-b72bb2.netlify.app/",
    "skill": ["Javascript", "React.js"],
    "github": "https://github.com/han0224/typing",
    "info": [
      {
        "id": "info-1",
        "title": "프로젝트 소개",
        "content": [
          "React.js 와 Javascript를 이용한 타자연습 웹 사이트",
          "평소 시간이 남을 때 타자연습을 하는 동생을 위해 개발하였습니다.",
          "최대한 깔끔한 디자인과 오타를 쉽게 확인할 수 있는 것에 초점을 두어 개발하였습니다."
        ]
      },
      {
        "id": "info-2",
        "title": "눌린 키보드 확인",
        "img": "https://user-images.githubusercontent.com/70616579/226365002-a90ccf0f-b54d-4846-a207-a94a35f7b7aa.gif",
        "content": [
          "사용자가 누른 키보드를 화면에서 볼 수 있도록 구현하였습니다.",
          "스페이스바와 일부 특수문자를 제외한 키보드를 구현하여 사용자가 보기 쉽게 개발하였습니다."
        ]
      },
      {
        "id": "info-3",
        "title": "오타",
        "img": "https://user-images.githubusercontent.com/70616579/226365019-af6d7be8-1411-4c5e-a8a0-31bfba52ab82.gif",
        "content": [
          "오타는 화면에 붉은 색과 줄이 그어져 확인하기 쉽도록 하였습니다.",
          "사용자가 더 이상 치지 않고 다음 문장으로 넘어갈 경우 작성하지 않은 문자들은 오타로 간주됩니다.",
          "오타에 따라 정확도가 다르게 나타납니다."
        ]
      },
      {
        "id": "info-4",
        "title": "다음 문장",
        "content": [
          "Enter 키를 입력하면 자동으로 다음문장으로 이동됩니다.",
          "모든 문장을 입력하지 않아도 Enter 키를 입력하면 다음 문장으로 이동됩니다.",
          "Enter 키를 두번 연속으로 눌러도 자동으로 2번 이동되지 않습니다",
          [
            "사용자가 실수로 Enter 키를 두번 누르는 것을 방지하지 위해 위와같은 로직을 추가했습니다."
          ]
        ]
      }
    ],
    "data": [
      {
        "id": "data-1",
        "title": "부딪혔던 문제 - 키보드 표시 기능",
        "content": [
          "기존에는 keyDown 이벤트의 key 프로퍼티로 사용자가 입력한 문자로 화면에 보여주는 방식을 채택했습니다.",
          "하지만, 특정확경에서는 한글이 제대로 입력되지 않고 Process가 출력되는것을 확인하였습니다.",
          "이후 key 대신 code 프로퍼티를 이용해 앞의 Key를 제외한 한글만을 추출해 사용자가 입력한 값을 추출하는 방식으로 변경했습니다."
        ]
      },
      {
        "id": "data-2",
        "title": "부딪혔던 문제 - 가상키보드 쌍자음 및 특수문자",
        "content": [
          "사용자가 입력한 값을 화면에 가상키보드에 보이도록 구현해두었습니다.",
          [
            "기본적으로 키보드에 있는 문자들과 숫자, 기본적인 특수문자만을 보이도록 구현했습니다."
          ],
          "그런데 만일 사용자가 쌍자음 혹은 Shift 와 조합하여 사용하는 특수문자를 입력하면 이를 화면에 재대로 출력이 되지 않는 오류가 존재했었습니다.",
          "code 프로퍼티의 규칙을 이용해 사용자가 숫자를 입력했는지, 문자를 입력했는지, 특수문자를 입력해쓴지 구분지어 각각의 로직을 작성했습니다.",
          [
            "사용자가 숫자를 입력했으면 code 프로퍼티에서 Digit를 제외한 숫자만을 추출해 이를 키보드에 표시하였습니다.",
            "사용자가 특수문자를 입력했으면 code 가 아닌 key 프로퍼티를 이용해 사용자가 입력한 특수문자를 키보드에 표시했습니다.",
            "사용자가 문자를 입력했으면 code 프로퍼티에서 Key를 제외한 문자만을 추출해 이를 키보드에 표시하였습니다."
          ],
          "만일, 사용자가 Shift와 조합하여 사용하는 특수문자를 입력했을 경우에는 trans 객체를 만들어 사용했습니다.",
          "해당 객체에 사용자가 입력한 문자가 키로 존재하면 알맞은 값으로 변경시켜주는 로직을 추가했습니다.",
          "이후 사용자가 숫자위의 특수문자, 쌍자음 등을 입력했을 경우에도 제대로 키보드에 출력이 되는것을 확인할 수 있었습니다."
        ]
      },

      {
        "id": "data-3",
        "title": "정확도와 타수",
        "content": [
          "정확도와 타수를 구현하기 위해선 이전까지 사용자가 입력했던 모든 값에 대한 정보를 가지고 있어야 했습니다.",
          "만일 사용자가 입력한 모든 값을 갖고 있을 경우 불필요한 데이터라는 생각을 떨칠수 없었습니다.",
          "그래서 현재 사용자가 입력한 값에 대한 데이터들을 숫자로 저장하기로 했습니다.",
          "결국 저장하고 있는 데이터는 사용자가 현재까지 입력한 글자 수와 오타 갯수, 사용자가 입력했어야할 글자 수 이렇게 총 3가지 데이터를 갖고 계속해서 업데이트 시켜주는 방식을 채택했습니다."
        ]
      }
    ]
  },
  {
    "id": 3,
    "img": "https://github.com/woorifisa-projects/GoodFriends/assets/70616579/c181b237-ac87-419c-9e80-ed1a75225bbc",
    "name": "goodFriends",
    "date": "2023.08 ~ 2023.09 (5주)",
    "team": "팀프로젝트 - 프론트엔드 담당",
    "url": "https://goodfriends.life/",
    "github": "https://github.com/woorifisa-projects/GoodFriends",
    "skill": ["Typescript", "vue.js"],
    "info": [
      {
        "id": "info-1",
        "title": "프로젝트 소개",
        "img": "",
        "content": [
          "우리FISA 최종 프로젝트",
          "중고거래시장이 커짐에 따라 중고거래 사기도 증가하고 있습니다.",
          "이를 인지하여 안심중고거래 서비스를 만들고자 노력하였습니다.",
          "구매자가 원하는 상품에 주문신청을 한 뒤 판매자가 구매자를 선택하는 방식으로 판매자가 사기를 당하지 않는 측면으로 구성했습니다."
        ]
      },
      {
        "id": "info-2",
        "title": "로그인하기",
        "img": "",
        "content": [
          "구글 계정으로 로그인이 가능합니다.",
          "자동로그인 기능이 있어 웹 페이지를 나갔다가 다시 들어가도 14일간 로그인이 되어있습니다.",
          "구글로 가입할시 구글로부터 이메일, 닉네임, 프로필 이미지가 프로필 정보에 자동으로 저장됩니다."
        ]
      },
      {
        "id": "info-3",
        "title": "상품 등록",
        "img": "https://github.com/devFancy/GoodFriends/assets/83820185/15e953e3-5fe5-49a7-86a0-5f38ac938d4e",
        "content": [
          "로그인 및 프로필 정보를 입력한 유저만 상품을 등록할 수 있습니다.",
          "상품을 등록할때 상품 제목과 상품 상세 설명과 카테고리를 선택해야만 등록할 수 있습니다.",
          "이미지는 최대 10장을 등록할 수 있습니다.",
          "각 이미지는 1M 미만이여야합니다.",
          ["해당 문제는 추후에 개선할 예정입니다."]
        ]
      },
      {
        "id": "info-4",
        "title": "상품 주문",
        "img": "https://github.com/woorifisa-projects/GoodFriends/assets/70616579/e672cd3b-5508-4555-8ab4-4ab78343e02c",
        "content": [
          "로그인 한 유저만 상품을 주문할 수 있습니다.",
          "주문하기를 클릭하면 모달창이 띄워지고 해당 양식을 모두 채워야지만 주문하기가 완료됩니다.",
          "상품을 주문할때는 자신이 원하는 날짜와 시간을 선택한 후 좀 더 자세한 사항을 판매자에게 전달할 수 있습니다.",
          "제출하기 버튼을 클릭한 후 한번 더 확인 창을 띄워 사용자가 확인할 수 있도록 하였습니다."
        ]
      },
      {
        "id": "info-5",
        "title": "신고하기",
        "img": "https://github.com/devFancy/GoodFriends/assets/83820185/cc6c7e71-1434-4a7f-b889-3b5998d4e6d3",
        "content": [
          "로그인 한 유저만 신고할 수 있습니다.",
          "신고하기를 클릭하면 해당 상품의 신고이유를 선택하고 좀 더 자세한 사항을 적을 수 있습니다."
        ]
      },

      {
        "id": "info-6",
        "title": "마이페이지",
        "img": "https://github.com/woorifisa-projects/GoodFriends/assets/70616579/30fa6b31-ded2-4210-9512-5e55f8a822a4",
        "content": [
          "프로필 정보를 수정할 수 있습니다.",
          ["이미지, 닉네임, 계좌번호, 핸드폰번호"],
          "핸드폰은 핸드폰 번호 인증을 해야지만 수정이 가능합니다.",
          "모든 사용자는 상품 등록, 주문, 신고하기 위해선 프로필을 등록해야합니다.",
          "프로필은 모든 정보가 올바라야합니다.",
          [
            "만일 특정 하나의 정보가 올바르지 않을 경우 해당 정보위에 특정 문구를 띄워 사용자가 다시 올바른 정보를 입력할 수 있도록 하였습니다."
          ]
        ]
      }
    ],
    "data": [
      {
        "id": "data-1",
        "title": "담당한 개발 부분",
        "img": "",
        "content": [
          "사용자 페이지 UI/UX 구현",
          [
            "메인 페이지, 프로필 페이지, 상품 페이지, 상품 등록 및 수정 페이지, 주문서 페이지"
          ],
          "axios 를 이용한 api 호출 구현",
          "pinia를 이용한 사용자 정보를 전역에서 관리하도록 구현",
          "모달창 구현",
          ["주문서 모달창, 확인하기 위한 모달창"],
          "입력에 관한 유효성 검사",
          [
            "알맞은 날짜인지 검사",
            "알맞은 핸드폰 번호인지 검사",
            "글자 제한에 대한 검사"
          ],
          "무한 스크롤 구현",
          "사용자에 따른 페이지 접근 제한",
          [
            "글작성자만 수정 페이지 접근 가능",
            "글작성자가 아닐 경우 해당 상품의 신고 페이지 접근 가능",
            "로그인 하지 않은 사용자에 경우 메인 페이지를 제외한 나머지 페이지 접근 불가"
          ]
        ]
      },
      {
        "id": "data-2",
        "title": "무한 스크로로 구현",
        "content": [
          "window에 scroll 이벤트를 추가해 스크롤이 마지막 근처에 접근하였을 때 api를 호출해 새로운 상품을 렌더링 할 수 있도록 구현하였습니다",
          "시간이 부족해 intersection Observer를 고려하지 못해 이부분에서 굉장한 아쉬움이 남습니다.",
          "이후 따로 intersection Observer에 대해 공부를 진행해 window에 scroll 이벤트를 추가하는 것과의 차이점에 대해 알 수 있는 기회가 되었습니다."
        ]
      },
      {
        "id": "data-3",
        "title": "pinia로 상태관리",
        "content": [
          "사용자의 정보를 상태관리 라이브러리인 pinia에서 관리하였습니다.",
          "헤더에서 언제나 사용자의 정보(닉네임, 프로필 이미지)를 보여주기때문에 이 정보들을 전역에서 관리하는 것이 효율적이라 생각해 pinia에서 관리하였습니다.",
          "또한, 이러한 정보들은 마이페이지에 들어갔을 때 바로 보여주는게 사용자 입장에서 더 좋은 경험일 겻이라 생각해 이러한 정보들을 pinia에서 관리하였습니다."
        ]
      },
      {
        "id": "data-4",
        "title": "사용자에 따른 페이지 접근 제한",
        "content": [
          "Vue.js에서 제공하는 네비게이션 가드를 이용해 로그인하지 않은 사용자의 접근을 제한하였습니다.",
          "로그인하지 않고 로그인이 필요한 페이지에 접근하였을 때, alert창과 함께 새로고침 후 메인페이지로 이동하게끔 구현하였습니다."
        ]
      },
      {
        "id": "data-5",
        "title": "새롭게 알게된 점들",
        "content": [
          "Vue.js를 이용한 첫 프로젝트인만큼 Vue에 대한 지식과 React와의 차이점을 새롭게 알 수 있었습니다.",
          "AWS S3의 CORS오류를 수정하면서 브라우저와 서버간의 통신 중 발생할 수 있는 CORS오류에 대해 다시한번 공부할 수 있는 계기가 되었습니다.",
          "Git Flow 전략을 이용해 좀 더 체계적으로 진행할 수 있었으며, Git에 대해 다시한번 공부할 수 있는 계기가 되었습니다."
        ],
        "tag": {
          "name": "git-flow 전략에 대해 정리한 블로그",
          "url": "https://goodfriends-team.tistory.com/2"
        }
      }
    ]
  },

  {
    "id": 4,
    "img": "https://github.com/han0224/portfolio/assets/70616579/3eb7e4cc-78d0-4ad9-a806-46b8c2d28148",
    "name": "포트폴리오",
    "date": "2023.11",
    "team": "개인 프로젝트",
    "url": "https://han0224.github.io/portfolio/#/",
    "urlInfo": "배포전",
    "skill": ["Javascript", "React.js"],
    "github": "https://github.com/han0224/portfolio",
    "info": [
      {
        "id": "info-1",
        "title": "프로젝트 소개",
        "content": [
          "현재 페이지 입니다!",
          "React.js 와 Javascript를 이용한 프로폴리오 사이트입니다."
        ]
      },
      {
        "id": "info-2",
        "title": "반응형",
        "img": "https://github.com/han0224/portfolio/assets/70616579/ba376c51-4dc2-4c66-9ac9-7929cdfcaf46",
        "content": ["media query 를 이용해 반응형 웹사이트를 구현했습니다."]
      },
      {
        "id": "info-3",
        "title": "버튼 클릭시 스크롤 이동",
        "img": "https://github.com/han0224/portfolio/assets/70616579/1ff14f4e-a189-4478-b194-452bd2ded04f",
        "content": [
          "header 의 About me, Skills, Projects 를 클릭할 경우 해당 섹션에 이동합니다.",
          "좌측 하단에 있는 버튼을 클릭하면 페이지 상당으로 이동합니다."
        ]
      }
    ],
    "data": [
      {
        "id": "data-1",
        "title": "겪었던 문제 - 스크롤 이동",
        "content": [
          "처음 useScrollMove hook을 만들었을 당시에는 무조건 dom객체를 ref를 이용해 선정해주어야 했습니다.",
          "그래서 header에 있는 버튼들로 특정 섹션으로 이동할 수 있었습니다.",
          "하지만 이후, 공통 컴포넌트인 upIcon은 해당 컴포넌트를 클릭했을 때 특정 dom 객체로 이동하는 것이 아닌 페이지의 상단으로 이동해야하는 문제가 발생했습니다.",
          "기존 custom hook을 이용하고 싶어 해당 hook의 매개변수를 설정해두었습니다. 해당 매개변수의 기본값은 null로 설정해두었습니다.",
          [
            "해당 hook은 ref 객체와 해당 객체의 상단으로 스크롤을 이동시키는 함수를 반환합니다."
          ],
          "매개변수의 값이 null일 경우 새로운 ref 객체를 만들어 반환하고, null이 아닐 경우 해당 매개변수를 반환합니다.",
          [
            "매개변수의 값이 null일 경우 hook의 반환값인 ref를 dom 객체에 설정하는 작업이 필요합니다.",
            "매개변수의 값이 null이 아닐 경우 매개변수는 dom 을 가리키는 ref 객체이므로 위의 작업이 필요없습니다."
          ]
        ]
      },
      {
        "id": "data-2",
        "title": "겪었던 문제 - github pages 배포 후 404오류",
        "content": [
          "프로젝트를 github pages로 배포한 후 프로젝트 페이지에 들어간 후 새로고침을 하면 404오류가 뜨는것을 확인할 수 있었습니다.",
          "github pages는 SPA를 지원하지 않기에 https://도메인 에서는 문제가 발생하지 않지만, https://도메인/project 에서 새로고침을 하게 될 경우 서버는 이를 모르기에 404오류가 발생했었습니다.",
          "이를 해결하기 위해 index.html과 내용이 똑같은 404.html 만들어 해당 페이지에 접속했을 때 index.html이 보이는것처럼 눈속임을 할 수 있습니다.",
          "이 방법말고도 hash routing을 사용하는 방법이 있었습니다.",
          [
            "hash router는 루트 리덱토리와 서브 디렉토리를 hash로 구분해주는데 hash 이후의 url 변경에는 리렌더링이 이루어지지 않아 서버에 요청이 들어가지 않기에 404 에러가 발생하지 않습니다.",
            "단, hash router는 client에서만 정보를 알고 있기에 SEO에 불리하다는 단점이 있습니다."
          ],
          "해당 프로젝트는 SEO에 민감한 프로젝트가 아니기에 browser router가 아닌 hash router를 채택했습니다."
        ]
      }
    ]
  }
]
